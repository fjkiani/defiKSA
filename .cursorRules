# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned


 [ ] **3. Component Content & Logic Updates (Iterative)**
     [...]
     [X] `StrategyBuilder.js` (Initial changes completed)
     [X] `PortfolioAnalyzer.js` (Initial changes completed)
         [X] **Sub-Task: Read Code (Completed)**
         [X] **Sub-Task: Implement DefiKSA Changes (Simulated Logic/UI)**
             [X] Title: Rename to "Compliant Portfolio Analyzer".
             [X] Update Analysis Logic (Simulated):
                 [X] Add asset-level compliance status (Compliant, Non-Compliant, Needs Review).
                 [X] Add source of yield/return analysis (Profit-Sharing, Trading Fees, Interest, etc.).
                 [X] Calculate overall portfolio compliance score.
                 [X] Revise sector exposure to focus on compliant vs. non-compliant activities.
             [X] Update Displayed Metrics:
                 [X] Display overall compliance score.
                 [X] List assets with individual compliance status/return source.
                 [X] Clearly show non-compliant exposure.
                 [X] Reframe risk/diversification in compliance context.
             [X] Update Recommendations:
                 [X] Generate recommendations focused on *improving* Sharia compliance.
                 [X] Ensure financial advice aligns with compliance rules.
     [ ] `TransactionLogs.js` (Next Up)
         [ ] **Sub-Task: Read Code (Completed)**
         [ ] **Sub-Task: Implement DefiKSA Changes**
             [ ] Title/Description: Update title to be more specific (e.g., "Agent Transaction Logs").
             [ ] Mock Data: Add `complianceStatus` field to mock transactions.
             [ ] UI Display: Show `complianceStatus` for each transaction (with visual cues).
             [ ] Filtering: Add basic filtering options (by compliance status, type).
             [ ] Update Note: Clarify that compliance status is also simulated.
     [ ] `ClaudeAssistant.js` (Prompts, context)
     [ ] `InteractiveTutorial.js` (Initial content update completed)
         [X] **Sub-Task: Read Code (Completed)**
         [X] **Sub-Task: Implement DefiKSA Changes**
             [X] Review/Rewrite `tutorialSteps` content for Sharia compliance (e.g., Liquidity Pools explanation).
             [X] Update corresponding quizzes.
             [ ] Define and potentially add content for other relevant tutorial topics (Mudarabah, Compliant Agents, etc.) (Deferred)
             [ ] Minor UI text updates if needed. (Deferred)
     [ ] `SwapInterface.js` (If applicable) (Next Up)
     [ ] `Dashboard.js` (Overview Tab Revamp) (Next Up)
         [X] **Sub-Task: Read Code (Completed)**
         [ ] **Sub-Task: Implement DefiKSA Changes**
             [ ] Define new mock data for compliant protocols within the component.
             [ ] Update main title and add intro text about compliance focus.
             [ ] Remove/Replace "Token Statistics" section.
             [ ] Rename "Pool Statistics" to "Featured Compliant Protocols".
             [ ] Display compliant protocol data (Compliance Status, Profit Share Rate instead of APR).
             [ ] Adjust display/linking of Risk Assessment.
     [ ] `RiskAssessment.js` (Refactor for Agent Workflow) (Next Up)
         [X] **Sub-Task: Read Code (Completed)**
         [X] **Sub-Task: Implement DefiKSA Changes**
             [X] Add "Sharia Compliance Risk" category.
             [X] Simulate compliance score/assessment logic (in `generateRiskAssessment` & `getDefaultRiskData`).
             [X] Adjust overall risk score calculation to include compliance.
             [X] Update descriptions and recommendations for compliance focus.
             [ ] **Sub-Task: Refactor for Agent Workflow**
                 [ ] Define Agent Interfaces (Input/Output for Sharia, SC, Econ, Centralization Agents).
                 [ ] Create Mock Agent Response functions (Simulate detailed reports).
                 [ ] Implement Orchestrator Simulation Logic (Call mocks, aggregate, synthesize).
                 [ ] Refactor `RiskAssessment.js` UI to display synthesized report (remove internal logic).
                 [ ] Update `Dashboard.js` trigger to use Orchestrator & pass report prop.
     [ ] `ProtocolMonitoringDashboard.js` (Next Up after Risk Assessment Refactor)
     [ ] `AgentCreationInterface.js` (Blocked - Manual edits pending or deferred)
     [ ] ... (Review others as needed)
[...]
